library(readr)
library(readr)
dadosCEAP <- read_csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
library(readr)
Inicialmente carregam-se os dados a serem analisados:
library(readr)
install.packages("readr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(dplyr)
library(readr)
dadosCEAP <- read_csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
dadosCEAP <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
eleicoes2014 <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
View(eleicoes2014)
despesasPorNome <- eleicoes2014 %>% group_by(nome);
despesasPorNome <- eleicoes2014 %>% group_by(nome) %>% filter(sexo = 'FEMININO');
library(dplyr)
library(dplyr)
library(readr)
install.packages("dplyr")
install.packages("Amelia")
library(Amelia)
amelia(despesaCEAP)
missmap(eleicoes2014)
View(eleicoes2014)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(dplyr)
library(readr)
library(Amelia)
eleicoes2014 <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
eleicoes2014$recursos_de_pessoas_juridicas[is.na(eleicoes2014$recursos_de_pessoas_juridicas)]<-median (eleicoes2014$recursos_de_pessoas_juridicas, na.rm = TRUE)
eleicoes2014$recursos_de_pessoas_juridicas[is.na(eleicoes2014$recursos_de_pessoas_juridicas)]<-median (eleicoes2014$recursos_de_pessoas_juridicas, na.rm = TRUE)
View(eleicoes2014)
missmap(eleicoes2014)
eleicoes2014$recursos_de_pessoas_juridicas[is.na(eleicoes2014$recursos_de_pessoas_juridicas)]<-median (eleicoes2014$recursos_de_pessoas_juridicas, na.rm = TRUE)
missmap(eleicoes2014)
eleicoes2014$recursos_proprios[is.na(eleicoes2014$recursos_proprios)]<-median (eleicoes2014$recursos_proprios, na.rm = TRUE)
View(eleicoes2014)
eleicoes2014$recursos_de_partidos[is.na(eleicoes2014$recursos_de_partidos)]<-median (eleicoes2014$recursos_de_partidos, na.rm = TRUE)
eleicoes2014$recursos_de_pessoas_juridicas[is.na(eleicoes2014$recursos_de_pessoas_juridicas)]<-median (eleicoes2014$recursos_de_pessoas_juridicas, na.rm = TRUE)
eleicoes2014$recursos_de_outros_candidatos.comites[is.na(eleicoes2014$recursos_de_outros_candidatos.comites)]<-median (eleicoes2014$recursos_de_outros_candidatos.comites, na.rm = TRUE)
eleicoes2014$recursos_de_pessoas_fisicas.[is.na(eleicoes2014$recursos_de_pessoas_fisicas.)]<-median (eleicoes2014$recursos_de_pessoas_fisicas., na.rm = TRUE)
View(eleicoes2014)
eleicoes2014$recursos_de_pessoas_fisicas.[is.na(eleicoes2014$recursos_de_pessoas_fisicas.)]<-median (eleicoes2014$recursos_de_pessoas_fisicas., na.rm = TRUE)
eleicoes2014$recursos_de_pessoas_fisicas[is.na(eleicoes2014$recursos_de_pessoas_fisicas)]<-median (eleicoes2014$recursos_de_pessoas_fisicas, na.rm = TRUE)
View(eleicoes2014)
eleicoes2014$recursos_de_pessoas_físicas[is.na(eleicoes2014$recursos_de_pessoas_físicas)]<-median (eleicoes2014$recursos_de_pessoas_físicas, na.rm = TRUE)
missmap(eleicoes2014)
eleicoes2014$recursos_de_pessoas_físicas[is.na(eleicoes2014$recursos_de_pessoas_físicas)]<-median (eleicoes2014$recursos_de_pessoas_físicas, na.rm = TRUE)
View(eleicoes2014)
voto.model<- lm(formula = votos ~ . -sequencial_candidato, eleicoes2014, na.action = na.omit)
voto.model<- lm(formula = votos ~ sequencial_candidato, eleicoes2014, na.action = na.omit)
summary(voto.model)
voto.model<- lm(formula = votos ~ recurso_proprio, eleicoes2014, na.action = na.omit)
voto.model<- lm(formula = votos ~ recursos_de_pessoas_físicas, eleicoes2014, na.action = na.omit)
summary(voto.model)
voto.model<- lm(formula = votos ~ eleicoes2014, eleicoes2014, na.action = na.omit)
voto.model<- lm(formula = votos ~ recursos_de_pessoas_físicas, eleicoes2014, na.action = na.omit)
summary(voto.model)
voto.model<- lm(formula = votos ~ ., eleicoes2014, na.action = na.omit)
voto.model<- lm(formula = votos ~ .-votos, eleicoes2014, na.action = na.omit)
voto.model<- lm(formula = votos ~ sexo, eleicoes2014, na.action = na.omit)
summary(voto.model)
voto.model<- lm(formula = votos ~ ., eleicoes2014, na.action = na.omit)
voto.model<- lm(formula = votos ~ .-cargo, eleicoes2014, na.action = na.omit)
input <- eleicoes2014 %>% select(-cargo)
voto.model<- lm(formula = votos ~ ., input, na.action = na.omit)
voto.model<- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
input <- eleicoes2014 %>% select(-cargo, -nome, -estado_civil)
input <- eleicoes2014 %>% select(-cargo, -nome, -estado_civil)
voto.model<- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
install.packages(c("tidyr", "corrplot"))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(dplyr)
library(readr)
library(Amelia)
library(leaps)
library(ggplot2)
library(tidyr)
library(corrplot)
eleicoes2014 <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
ggplot(voto.model, aes(x = .predict, y = .resid)) +
geom_point(color = "#56B4E9") +
xlab("Fitted") +
ylab("Residuals")
ggplot(voto.model, aes(x = .predicts, y = .resid)) +
geom_point(color = "#56B4E9") +
xlab("Fitted") +
ylab("Residuals")
ggplot(voto.model, aes(x = .predicted, y = .resid)) +
geom_point(color = "#56B4E9") +
xlab("Fitted") +
ylab("Residuals")
ggplot(voto.model, aes(x = .fitted, y = .resid)) +
geom_point(color = "#56B4E9") +
xlab("Fitted") +
ylab("Residuals")
ggplot(voto.model, aes(x = predict(voto.model), y = residuals(voto.model))) +
geom_point(color = "#56B4E9") +
xlab("Fitted") +
ylab("Residuals")
ggplot(voto.model, aes(x = predict(voto.model), y = residuals(voto.model))) +
geom_point(color = "#56B4E9") +
xlab("Predict") +
ylab("Residuals")
input$UF <- as.numeric(input$UF)
input$sexo <- as.numeric(input$sexo)
input$partido <- as.numeric(input$partido)
input <- input %>% select(-cargo, -nome, -grau, -estado_civil, -sequencial_candidato, -numero_cadidato, -idade, -setor_economico_receita, -setor_economico_despesa)
eleicoes2014$recursos_de_pessoas_juridicas[is.na(eleicoes2014$recursos_de_pessoas_juridicas)]<-median (eleicoes2014$recursos_de_pessoas_juridicas, na.rm = TRUE)
eleicoes2014$recursos_de_partidos[is.na(eleicoes2014$recursos_de_partidos)]<-median (eleicoes2014$recursos_de_partidos, na.rm = TRUE)
eleicoes2014$recursos_proprios[is.na(eleicoes2014$recursos_proprios)]<-median (eleicoes2014$recursos_proprios, na.rm = TRUE)
eleicoes2014$recursos_de_outros_candidatos.comites[is.na(eleicoes2014$recursos_de_outros_candidatos.comites)]<-median (eleicoes2014$recursos_de_outros_candidatos.comites, na.rm = TRUE)
eleicoes2014$recursos_de_pessoas_físicas[is.na(eleicoes2014$recursos_de_pessoas_físicas)]<-median (eleicoes2014$recursos_de_pessoas_físicas, na.rm = TRUE)
eleicoes2014 <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
eleicoes2014$recursos_de_pessoas_juridicas[is.na(eleicoes2014$recursos_de_pessoas_juridicas)]<-median (eleicoes2014$recursos_de_pessoas_juridicas, na.rm = TRUE)
eleicoes2014$recursos_de_partidos[is.na(eleicoes2014$recursos_de_partidos)]<-median (eleicoes2014$recursos_de_partidos, na.rm = TRUE)
eleicoes2014$recursos_proprios[is.na(eleicoes2014$recursos_proprios)]<-median (eleicoes2014$recursos_proprios, na.rm = TRUE)
eleicoes2014$recursos_de_outros_candidatos.comites[is.na(eleicoes2014$recursos_de_outros_candidatos.comites)]<-median (eleicoes2014$recursos_de_outros_candidatos.comites, na.rm = TRUE)
eleicoes2014$recursos_de_pessoas_físicas[is.na(eleicoes2014$recursos_de_pessoas_físicas)]<-median (eleicoes2014$recursos_de_pessoas_físicas, na.rm = TRUE)
input$UF <- as.numeric(input$UF)
input$sexo <- as.numeric(input$sexo)
input <- eleicoes2014
input$UF <- as.numeric(input$UF)
input$sexo <- as.numeric(input$sexo)
input$partido <- as.numeric(input$partido)
input <- input %>% select(-cargo, -nome, -grau, -estado_civil, -sequencial_candidato, -numero_cadidato, -idade, -setor_economico_receita, -setor_economico_despesa)
voto.model <- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
corr = cor(input[, 1:16])
round(corr, 2)
corrplot(corr, method="circle")
round(corr, 2)
input <- input %>% select(-total_receita, -total_despesa, -quantidade_despesas)
voto.model <- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
input <- input %>% select(-total_despesa, -quantidade_despesas)
input <- eleicoes2014
input$UF <- as.numeric(input$UF)
input$sexo <- as.numeric(input$sexo)
input$partido <- as.numeric(input$partido)
input <- input %>% select(-cargo, -nome, -grau, -estado_civil, -sequencial_candidato, -numero_cadidato, -idade, -setor_economico_receita, -setor_economico_despesa)
voto.model <- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
corr = cor(input[, 1:16])
round(corr, 2)
input <- input %>% select(-total_despesa, -quantidade_despesas, -quantidade_doares)
input <- input %>% select(-total_despesa, -quantidade_despesas, -quantidade_doadores)
voto.model <- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
ggplot(voto.model, aes(x = predict(voto.model), y = residuals(voto.model))) +
geom_point(color = "#56B4E9") +
xlab("Predict") +
ylab("Residuals")
regsubconj <-
regsubsets(votos ~ .,
data = input,
nbest = 1,       # seleciona um melhor modelo para cada numero de preditores
nvmax = NULL,    # Sem limites de variaveis
force.in = NULL, force.out = NULL,
method = "exhaustive",
really.big = T)
summary_regsubconj <- summary(regsubconj)
summary_regsubconj
melhor_modelo <- which.max(summary_regsubconj$adjr2)
melhor_modelo
summary_regsubconj$which[melhor_modelo,]
input <- input %>% select(-cargo, -nome, -grau, -estado_civil, -sequencial_candidato, -numero_cadidato, -idade, -setor_economico_receita, -setor_economico_despesa, -UF, -partido, -quantidade_doacoes)
input <- eleicoes2014
input$UF <- as.numeric(input$UF)
input$sexo <- as.numeric(input$sexo)
input$partido <- as.numeric(input$partido)
input <- input %>% select(-cargo, -nome, -grau, -estado_civil, -sequencial_candidato, -numero_cadidato, -idade, -setor_economico_receita, -setor_economico_despesa, -UF, -partido, -quantidade_doacoes)
voto.model <- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
corr = cor(input[, 1:16])
corr = cor(input[, 1:14])
corr = cor(input[, 1:15])
corr = cor(input[, 1:14])
round(corr, 2)
corrplot(corr, method="circle")
round(corr, 2)
input <- input %>% select(-total_despesa)
voto.model <- lm(formula = votos ~ ., input, na.action = na.omit)
summary(voto.model)
ggplot(voto.model, aes(x = predict(voto.model), y = residuals(voto.model))) +
geom_point(color = "#56B4E9") +
xlab("Predict") +
ylab("Residuals")
regsubconj <-
regsubsets(votos ~ .,
data = input,
nbest = 1,       # seleciona um melhor modelo para cada numero de preditores
nvmax = NULL,    # Sem limites de variaveis
force.in = NULL, force.out = NULL,
method = "exhaustive",
really.big = T)
summary_regsubconj <- summary(regsubconj)
summary_regsubconj
melhor_modelo <- which.max(summary_regsubconj$adjr2)
melhor_modelo
summary_regsubconj$which[melhor_modelo,]
install.packages("caret")
library(caret)
eleicoes2014 <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
input <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
View(input)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(dplyr)
library(readr)
library(Amelia)
library(leaps)
library(ggplot2)
library(tidyr)
library(corrplot)
eleicoes2014 <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
write.csv(input,'input_eleicoes2014.csv', row.names=FALSE))
write.csv(input,'input_eleicoes2014.csv', row.names=FALSE)
input <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
input <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
write.csv(input,'input_eleicoes2014.csv', row.names=FALSE)
View(input)
write.csv(input,'input_eleicoes2014.csv', row.names=FALSE)
input <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
input <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
View(input)
input <- read.csv("~/Downloads/input_eleicoes2014.csv", encoding = "latin1")
View(input)
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
View(input)
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato)
View(input)
model <- train(votos ~ .,
data = input,
method = "ridge")
smp_size <- floor(0.75 * nrow(mtcars))
smp_size <- floor(0.75 * nrow(input))
set.seed(123)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
input[is.na(input)] <- 0
View(input)
model <- train(votos ~ .,
data = input,
method = "ridge")
model <- train(votos ~ .,
data = train,
method = "ridge")
input[is.na(input)] <- 0
smp_size <- floor(0.75 * nrow(input))
set.seed(123)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
model <- train(votos ~ .,
data = train,
method = "ridge")
View(train)
View(input)
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato, -setor_economico_receita, -setor_economico_despesa)
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato, -setor_economico_receita, -setor_economico_despesa)
input[is.na(input)] <- 0
smp_size <- floor(0.75 * nrow(input))
set.seed(123)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
model <- train(votos ~ .,
data = train,
method = "ridge")
eleicoes2014 <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
View(eleicoes2014)
model
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato, -setor_economico_despesa)
input[is.na(input)] <- 0
smp_size <- floor(0.75 * nrow(input))
set.seed(123)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
model <- train(votos ~ .,
data = train,
method = "ridge")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato, -setor_economico_receita)
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato, -setor_economico_receita)
## Setando os valores NA para zero
input[is.na(input)] <- 0
## gerando partição de 75% dos dados
smp_size <- floor(0.75 * nrow(input))
## Setando a seed para fazer a partição reproduzível
set.seed(123)
## Particionando o dataset em dois: treino (75%) e teste (25%)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato, -setor_economico_receita, -setor_economico_despesa)
## Setando os valores NA para zero
input[is.na(input)] <- 0
## gerando partição de 75% dos dados
smp_size <- floor(0.75 * nrow(input))
## Setando a seed para fazer a partição reproduzível
set.seed(123)
## Particionando o dataset em dois: treino (75%) e teste (25%)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
model <- train(votos ~ .,
data = train,
method = "ridge")
model
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
repeats = 10)
fitControl <- trainControl(method = "cv",
number = 10,
repeats = 10)
fitControl <- trainControl(method = "cv",
number = 10)
model <- train(votos ~ .,
data = train,
fitControl = fitControl,
method = "ridge")
model
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model <- train(votos ~ .,
data = train,
fitControl = fitControl,
method = "ridge")
model <- train(votos ~ .,
data = train,
trControl = fitControl,
tuneGrid = lambdaGrid,
method = "ridge")
lambdaGrid <- expand.grid(lambda = 10^seq(10, -2, length=100))
model <- train(votos ~ .,
data = train,
trControl = fitControl,
tuneGrid = lambdaGrid,
method = "ridge")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
lambdaGrid <- expand.grid(lambda = 10^seq(10, -2, length=100))
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
tuneGrid = lambdaGrid,
method = "ridge")
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
lambdaGrid <- expand.grid(lambda = 10^seq(10, -2, length=100))
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
tuneGrid = lambdaGrid,
method = "ridge")
fitControl <- trainControl(method = "repeatedcv",
number = 5)
lambdaGrid <- expand.grid(lambda = 10^seq(10, -2, length=100))
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
tuneGrid = lambdaGrid,
method = "ridge")
lambdaGrid <- expand.grid(lambda = 10^seq(10, -2, length=100))
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge")
model.ridge
model.lasso <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "lasso")
model.lasso
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random")
lambdaGrid <- expand.grid(lambda = 10^seq(10, -2, length=100))
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge")
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge")
model.ridge
View(input)
model.knn <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "knn")
preProcValues <- preProcess(x = trainX,method = c("center", "scale"))
preProcValues <- preProcess(x = train,method = c("center", "scale"))
preProcValues
model.knn <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "knn",
preProcess = c("center","scale"))
model.knn <- train(votos ~ .,
data = train,
method = "knn",
preProcess = c("center","scale"))
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato)
input <- read.csv("~/Downloads/eleicoes2014.csv", encoding = "latin1")
input <- input %>% select(-cargo, -nome, -sequencial_candidato, -numero_cadidato)
## Setando os valores NA para zero
input[is.na(input)] <- 0
## gerando partição de 75% dos dados
smp_size <- floor(0.75 * nrow(input))
## Setando a seed para fazer a partição reproduzível
set.seed(123)
## Particionando o dataset em dois: treino (75%) e teste (25%)
train_ind <- sample(seq_len(nrow(input)), size = smp_size)
train <- input[train_ind, ]
test <- input[-train_ind, ]
model.knn <- train(votos ~ .,
data = train,
method = "knn",
preProcess = c("center","scale", "nzv"))
preProcValues <- preProcess(x = train,method = c("center", "scale", "nzv"))
model.knn <- train(votos ~ .,
data = train,
method = "knn",
preProcess = preProcValues)
preProcValues <- preProcess(x = train,method = c("center", "scale", "nzv"))
model.knn <- train(votos ~ .,
data = train,
method = "knn",
preProcess = c("center","scale", "nzv"))
model.lasso <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "lasso",
preProcess = c("center", "scale", "nzv"))
model.lasso
preProcValues <- c("center", "scale", "nzv")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(readr)
library(caret)
library(dplyr)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random")
preProcValues <- c("center", "scale", "nzv")
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge",
preProcess = preProcValues,
tuneLength = 10)
model.ridge
model.lasso <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "lasso",
preProcess = preProcValues,
tuneLength = 5)
model.lasso
model.knn <- train(votos ~ .,
data = train,
method = "knn",
preProcess = preProcValues,
tuneLength = 5)
model.knn
ggplot(varImp(model.ridge))
ggplot(varImp(model.lasso))
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
preProcValues <- c("center", "scale", "nzv")
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge",
preProcess = preProcValues,
tuneLength = 10)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
preProcValues <- c("center", "scale", "nzv")
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge",
preProcess = preProcValues,
tuneLength = 10)
model.ridge <- train(votos ~ .,
data = train,
trControl = fitControl,
method = "ridge",
preProcess = preProcValues,
tuneLength = 5)
